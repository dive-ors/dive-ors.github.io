<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on notepad</title>
    <link>https://dive-ors.github.io/posts/</link>
    <description>Recent content in Posts on notepad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>©2019 Notepadium.</copyright>
    <lastBuildDate>Sat, 16 Apr 2022 16:16:09 +0900</lastBuildDate>
    
        <atom:link href="https://dive-ors.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker Engine 02</title>
      <link>https://dive-ors.github.io/posts/docker/docker-02-02/</link>
      <pubDate>Sat, 16 Apr 2022 16:16:09 +0900</pubDate>
      
      <guid>https://dive-ors.github.io/posts/docker/docker-02-02/</guid>
      <description>&lt;h2 id=&#34;container-application-구축&#34;&gt;Container Application 구축&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Elastic Search 02 장</title>
      <link>https://dive-ors.github.io/posts/elasticsearch/elastic-search-02/</link>
      <pubDate>Thu, 07 Apr 2022 23:10:26 +0900</pubDate>
      
      <guid>https://dive-ors.github.io/posts/elasticsearch/elastic-search-02/</guid>
      <description>&lt;h1 id=&#34;2장-es-기본-동작&#34;&gt;2장 ES 기본 동작&lt;/h1&gt;
&lt;h2 id=&#34;문서-색인과-조회&#34;&gt;문서 색인과 조회&lt;/h2&gt;
&lt;p&gt;아래 요청은 인덱스를 생성하고, 문서를 색인하고, 스키마를 만드는 등, 많은 작업을 처리한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# request 
PUT /user/_doc/1  
{
  &amp;#34;username&amp;#34; : &amp;#34;alden.kang&amp;#34;
}

# response
{
  &amp;#34;_index&amp;#34; : &amp;#34;user&amp;#34;,
  &amp;#34;_id&amp;#34; : &amp;#34;1&amp;#34;,
  &amp;#34;_version&amp;#34; : 1,
  &amp;#34;result&amp;#34; : &amp;#34;created&amp;#34;,
  &amp;#34;_shards&amp;#34; : {
    &amp;#34;total&amp;#34; : 2,
    &amp;#34;successful&amp;#34; : 1,
    &amp;#34;failed&amp;#34; : 0
  },
  &amp;#34;_seq_no&amp;#34; : 0,
  &amp;#34;_primary_term&amp;#34; : 1
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;PUT 은 새로운 문서를 입력한다.
&lt;ul&gt;
&lt;li&gt;POST 는 수정&lt;/li&gt;
&lt;li&gt;DELETE 는 삭제&lt;/li&gt;
&lt;li&gt;GET은 조회를 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;user 는 index 의 이름으로, 인덱스란 문서를 저장하는 가장 큰 논리적인 단위를 의미한다.&lt;/li&gt;
&lt;li&gt;_doc 은 문서의 타입을 의미하며, 6 버전 이후부턴 인덱스에 하나의 타입만 저장 할 수 있게 설계가 변경되었다.&lt;/li&gt;
&lt;li&gt;1 은 문서의 ID 이며, 같은 ID 가 입력되면 문서를 수정한다고 인식한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉, 위 요청은 user 라는 Index 에 _doc 타입으로 1번 문서를 색인해달라는 요청이다.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://dive-ors.github.io/images/es/%ec%83%89%ec%9d%b8-%ea%b3%bc%ec%a0%95.jpg&#34;
        alt=&#34;색인 과정&#34;/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;색인 요청 시, Index 가 없다면 Index 를 생성한다.&lt;/li&gt;
&lt;li&gt;Index 생성 후 (or Index 가 있다면) 타입을 확인 후 생성한다.&lt;/li&gt;
&lt;li&gt;타입 이 후, scheme 가 없다면 생성하고, scheme 간 충돌이 있다면 exception 을 발생 시킨다.&lt;/li&gt;
&lt;li&gt;scheme 에 문제가 없다면, 기존 문서 ID 값을 이용하여 생성 / 업데이트를 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 과정을 통해 Elasticsearch 는 Index / Type / Scheme 를 정의하지 않아도 문서를 색인 할 수 있다.&lt;/p&gt;
&lt;p&gt;저장된 문서를 확인하기 위해서 GET 을 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#request
GET /user/_doc/1

#response
{
  &amp;#34;_index&amp;#34; : &amp;#34;user&amp;#34;, # 
  &amp;#34;_id&amp;#34; : &amp;#34;1&amp;#34;,
  &amp;#34;_version&amp;#34; : 1,
  &amp;#34;_seq_no&amp;#34; : 0,
  &amp;#34;_primary_term&amp;#34; : 1,
  &amp;#34;found&amp;#34; : true,
  &amp;#34;_source&amp;#34; : {
    &amp;#34;username&amp;#34; : &amp;#34;alden.kang&amp;#34;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;조회 시에는 문서의 메티데이터가 함께 나오는데, 각 설명은 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;_index&amp;rdquo; 어떤 인덱스에 있는지를 의미한다.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;_type&amp;rdquo; 어떤 타입인지를 의미한다.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;_id&amp;rdquo; 문서의 id를 의미한다.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;_source&amp;rdquo; 문서의 내용을 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또한 문서를 삭제하기 위해선 DELETE 를 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#request
DELETE /user/_doc/1

#response
{
  &amp;#34;_index&amp;#34; : &amp;#34;user&amp;#34;,
  &amp;#34;_id&amp;#34; : &amp;#34;1&amp;#34;,
  &amp;#34;_version&amp;#34; : 2,
  &amp;#34;result&amp;#34; : &amp;#34;deleted&amp;#34;,
  &amp;#34;_shards&amp;#34; : {
    &amp;#34;total&amp;#34; : 2,
    &amp;#34;successful&amp;#34; : 1,
    &amp;#34;failed&amp;#34; : 0
  },
  &amp;#34;_seq_no&amp;#34; : 1,
  &amp;#34;_primary_term&amp;#34; : 1
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;result 를 보면 정상적으로 삭제되었음을 알 수 있다. 문서를 삭제 후, 조회하면 아래와 같은 결과가 나온다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;found&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이번엔 위 과정들을 조금 더 풀어서, 생성 / 색인 / 수정 등의 과정을 한 단계 씩 진행해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# 문서 생성 
PUT /contents/_doc/1?pretty
{
  &amp;#34;title&amp;#34; : &amp;#34;How to use ElasticSearch&amp;#34;,
  &amp;#34;author&amp;#34; : &amp;#34;alden.kang&amp;#34;
}
# response
{
  &amp;#34;_index&amp;#34; : &amp;#34;contents&amp;#34;,
  &amp;#34;_id&amp;#34; : &amp;#34;1&amp;#34;,
  &amp;#34;_version&amp;#34; : 1, 
  &amp;#34;result&amp;#34; : &amp;#34;created&amp;#34;,
  &amp;#34;_shards&amp;#34; : {
    &amp;#34;total&amp;#34; : 2,
    &amp;#34;successful&amp;#34; : 1,
    &amp;#34;failed&amp;#34; : 0
  },
  &amp;#34;_seq_no&amp;#34; : 2,
  &amp;#34;_primary_term&amp;#34; : 1
}

# index 상태 확인 
GET _cat/indices?v

# response
health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size
yellow open   contents n1yijQ6bQ8SpQSIuyLoDXg   1   1          1            0      4.6kb          4.6kb
yellow open   user     GuQ0DmjHQXa0AXWWCZpGSw   1   1          0            0      3.3kb          3.3kb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 상태에서 문서의 내용을 바꾼 후, PUT을 입력하면 아래와 같은 응답을 받게된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;contents&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;_version&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;이&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;증가했다.&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;updated&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;가&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;updated&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;로&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;바뀐다.&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;_shards&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;successful&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;failed&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;_seq_no&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;_primary_term&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 처럼 동일한 ID 를 이용하여 문서를 입력하면, 수정이 발생한다.
또한 이렇게 입력된 scheme 정보는 아래 명령어로 확인 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# scheme mapping 정보 확인 
GET /contents/_mapping

#response 
{
  &amp;#34;contents&amp;#34; : {
    &amp;#34;mappings&amp;#34; : {
      &amp;#34;properties&amp;#34; : {
        &amp;#34;author&amp;#34; : {
          &amp;#34;type&amp;#34; : &amp;#34;text&amp;#34;,
          &amp;#34;fields&amp;#34; : {
            &amp;#34;keyword&amp;#34; : {
              &amp;#34;type&amp;#34; : &amp;#34;keyword&amp;#34;,
              &amp;#34;ignore_above&amp;#34; : 256
            }
          }
        },
        &amp;#34;title&amp;#34; : {
          &amp;#34;type&amp;#34; : &amp;#34;text&amp;#34;,
          &amp;#34;fields&amp;#34; : {
            &amp;#34;keyword&amp;#34; : {
              &amp;#34;type&amp;#34; : &amp;#34;keyword&amp;#34;,
              &amp;#34;ignore_above&amp;#34; : 256
            }
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 응답으로, author, title 필드가 정의되었고 둘 다 문자열 형태의 타입으로 정의된 것을 알 수 있다.
이 상태에서 새로운 필드를 가진 문서를 색인하면, 아래처럼 scheme 이 바뀐다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;PUT /contents/_doc/1?pretty
{
  &amp;#34;title&amp;#34; : &amp;#34;How to use ElasticSearch&amp;#34;,
  &amp;#34;author&amp;#34; : &amp;#34;alden.kang&amp;#34;,
  &amp;#34;rating&amp;#34; : 5.0
}

# response
{
  &amp;#34;contents&amp;#34; : {
    &amp;#34;mappings&amp;#34; : {
      &amp;#34;properties&amp;#34; : {
        &amp;#34;author&amp;#34; : {
          &amp;#34;type&amp;#34; : &amp;#34;text&amp;#34;,
          &amp;#34;fields&amp;#34; : {
            &amp;#34;keyword&amp;#34; : {
              &amp;#34;type&amp;#34; : &amp;#34;keyword&amp;#34;,
              &amp;#34;ignore_above&amp;#34; : 256
            }
          }
        },
        &amp;#34;rating&amp;#34; : { # rating 이 추가되었다.
          &amp;#34;type&amp;#34; : &amp;#34;float&amp;#34;
        },
        &amp;#34;title&amp;#34; : {
          &amp;#34;type&amp;#34; : &amp;#34;text&amp;#34;,
          &amp;#34;fields&amp;#34; : {
            &amp;#34;keyword&amp;#34; : {
              &amp;#34;type&amp;#34; : &amp;#34;keyword&amp;#34;,
              &amp;#34;ignore_above&amp;#34; : 256
            }
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;정상적으로 문서가 색인 된 걸 볼 수 있는데, 기존에 scheme 가 정의되어 있다고 하더라도, 새로운 필드가 추가되면 동적으로 필드가 색인되고, 스키마가 정의된다는 것을 알 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rating 이 실수 형으로 입력되어, float type 으로 정의되었다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;만약 이미 저장된 scheme 과 다른 Type 으로 데이터가 입력되면 어떻게 될까 ?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;
PUT /contents/_doc/3?pretty
{
  &amp;#34;title&amp;#34; : &amp;#34;How to use ElasticSearch&amp;#34;,
  &amp;#34;author&amp;#34; : &amp;#34;alden.kang&amp;#34;,
  &amp;#34;rating&amp;#34; : &amp;#34;Hello&amp;#34;
}

# response

{
  &amp;#34;error&amp;#34; : {
    &amp;#34;root_cause&amp;#34; : [
      {
        &amp;#34;type&amp;#34; : &amp;#34;mapper_parsing_exception&amp;#34;,
        &amp;#34;reason&amp;#34; : &amp;#34;failed to parse field [rating] of type [float] in document with id &amp;#39;3&amp;#39;. Preview of field&amp;#39;s value: &amp;#39;Hello&amp;#39;&amp;#34;
      }
    ],
    &amp;#34;type&amp;#34; : &amp;#34;mapper_parsing_exception&amp;#34;,
    &amp;#34;reason&amp;#34; : &amp;#34;failed to parse field [rating] of type [float] in document with id &amp;#39;3&amp;#39;. Preview of field&amp;#39;s value: &amp;#39;Hello&amp;#39;&amp;#34;,
    &amp;#34;caused_by&amp;#34; : {
      &amp;#34;type&amp;#34; : &amp;#34;number_format_exception&amp;#34;,
      &amp;#34;reason&amp;#34; : &amp;#34;For input string: \&amp;#34;Hello\&amp;#34;&amp;#34;
    }
  },
  &amp;#34;status&amp;#34; : 400
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 처럼 타입이 맞지 않아, &lt;code&gt;mapper_parsing_exception&lt;/code&gt; 이 발생한다.
scheme 충돌 에러는 로그 수집 시, 최초에 들어온 로그의 필드가 중간에 형태가 바뀌는 경우에 주로 발생한다.
그리고 이 에러가 발생하면, 해당 로그가 색인 되지 않기 때문에, 로그 유실이 발생 할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ES 가 schemeless 라는 것은, 정의가 아예 없다는 뜻이 아니며, 동적 scheme 를 지원한다는 의미이다.
즉, 중간에 필드 형태가 바뀌는 것 까지 알아서 잡아주진 않는다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;문서-검색하기&#34;&gt;문서 검색하기&lt;/h2&gt;
&lt;p&gt;자세한 옵션과 쿼리들은 9장에서 설명하며, 이번 장은 기능만 간단히 살펴본다.&lt;/p&gt;
&lt;p&gt;첫번째로 모든 데이터를 검색하는 풀 스캔 쿼리를 날려보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;GET /kibana_sample_data_ecommerce/_search?q=*

#response
{
  &amp;#34;took&amp;#34; : 2,
  &amp;#34;timed_out&amp;#34; : false,
  &amp;#34;_shards&amp;#34; : {
    &amp;#34;total&amp;#34; : 1,
    &amp;#34;successful&amp;#34; : 1,
    &amp;#34;skipped&amp;#34; : 0,
    &amp;#34;failed&amp;#34; : 0
  },
  &amp;#34;hits&amp;#34; : {
    &amp;#34;total&amp;#34; : {
      &amp;#34;value&amp;#34; : 4675,
      &amp;#34;relation&amp;#34; : &amp;#34;eq&amp;#34;
    },
    &amp;#34;max_score&amp;#34; : 1.0,
    &amp;#34;hits&amp;#34; : [
      {
        &amp;#34;_index&amp;#34; : &amp;#34;kibana_sample_data_ecommerce&amp;#34;,
        &amp;#34;_id&amp;#34; : &amp;#34;qxA0y38BuI-mHmqmzk_V&amp;#34;,
        &amp;#34;_score&amp;#34; : 1.0,
        &amp;#34;_source&amp;#34; : {
          &amp;#34;category&amp;#34; : [
            &amp;#34;Men&amp;#39;s Clothing&amp;#34;
          ],
    //생략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;kibana_sample_data_ecommerce 는 kibana 에서 추가한 sample data 를 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;q 는 query 의 약자이며, *은 모든 단어를 의미한다.
위 응답중 중요한 데이터는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;took 은 검색에 소요된 시간을 의미한다.&lt;/li&gt;
&lt;li&gt;_shards -&amp;gt; total 은 검색에 참여한 샤드의 개수를 의미한다.&lt;/li&gt;
&lt;li&gt;hits -&amp;gt; total 은 검색 결과의 개수를 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;검색 쿼리는 아래처럼 문자열을 검색하거나, 각 필드의 값을 검색 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# 1
GET /kibana_sample_data_ecommerce/_search?q=Eddie # Eddie 라는 문자열이 포함된 문서를 찾기 위한 검색

# 2
GET /kibana_sample_data_ecommerce/_search # order_id 가 584677 인 문서를 찾기 위한 query 이다.
{
  &amp;#34;query&amp;#34; : {
    &amp;#34;match&amp;#34; : {
      &amp;#34;order_id&amp;#34; : 584677
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;#1&lt;/code&gt; 은 Eddie 라는 문자열이 포함된 문서를 찾기 위한 Query 이며, &lt;code&gt;#2&lt;/code&gt; 는 order_id 가 584677 인 문서를 찾기 위한 query 이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#3
GET /kibana_sample_data_ecommerce/_search
{
  &amp;#34;query&amp;#34;: {
    &amp;#34;bool&amp;#34; : {
      &amp;#34;must&amp;#34;: {&amp;#34;match_all&amp;#34;: {}},
      &amp;#34;filter&amp;#34;: {
          &amp;#34;range&amp;#34;: {
            &amp;#34;products.price&amp;#34;: {
              &amp;#34;gte&amp;#34;: 100
            }
          }
        }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;#3&lt;/code&gt; 은 범위를 기준으로 한 검색으로, price 가 100 이상인 문서를 검색한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;filter 와 query 의 자세한 차이점은 9장에서 살펴본다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;문서-분석하기&#34;&gt;문서 분석하기&lt;/h2&gt;
&lt;p&gt;이 전까진 특정 조건을 만족하는 문서를 검색했다면, 검색을 바탕으로 통계 데이터를 만들 수 있다.
이러한 분석 작업을 aggregation 이라고 부르며, 역시 search API 를 기반으로 진행된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#4
GET /kibana_sample_data_ecommerce/_search
{
  &amp;#34;size&amp;#34;: 0,
  &amp;#34;aggs&amp;#34; : {
    &amp;#34;group_by_state&amp;#34;: {
       &amp;#34;terms&amp;#34;: {
         &amp;#34;field&amp;#34;: &amp;#34;customer_gender&amp;#34;
       } 
    }
  }
}

# response
{
  &amp;#34;took&amp;#34; : 23,
  &amp;#34;timed_out&amp;#34; : false,
  &amp;#34;_shards&amp;#34; : {
    &amp;#34;total&amp;#34; : 1,
    &amp;#34;successful&amp;#34; : 1,
    &amp;#34;skipped&amp;#34; : 0,
    &amp;#34;failed&amp;#34; : 0
  },
  &amp;#34;hits&amp;#34; : {
    &amp;#34;total&amp;#34; : {
      &amp;#34;value&amp;#34; : 4675,
      &amp;#34;relation&amp;#34; : &amp;#34;eq&amp;#34;
    },
    &amp;#34;max_score&amp;#34; : null,
    &amp;#34;hits&amp;#34; : [ ]
  },
  &amp;#34;aggregations&amp;#34; : {
    &amp;#34;group_by_state&amp;#34; : {
      &amp;#34;doc_count_error_upper_bound&amp;#34; : 0,
      &amp;#34;sum_other_doc_count&amp;#34; : 0,
      &amp;#34;buckets&amp;#34; : [
        {
          &amp;#34;key&amp;#34; : &amp;#34;FEMALE&amp;#34;,
          &amp;#34;doc_count&amp;#34; : 2433
        },
        {
          &amp;#34;key&amp;#34; : &amp;#34;MALE&amp;#34;,
          &amp;#34;doc_count&amp;#34; : 2242
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;#4&lt;/code&gt; 은 aggregation query 로, 상품을 구매한 성별을 기준으로 통계 데이터를 추출한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FEMALE 가 2,433 건, MALE 이 2,242 건임을 알 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#5
GET /kibana_sample_data_ecommerce/_search
{
  &amp;#34;size&amp;#34;: 0,
  &amp;#34;aggs&amp;#34; : {
    &amp;#34;group_by_state&amp;#34;: {
       &amp;#34;terms&amp;#34;: {
         &amp;#34;field&amp;#34;: &amp;#34;customer_gender&amp;#34;
       },
       &amp;#34;aggs&amp;#34; : {
         &amp;#34;average_product&amp;#34; : {
           &amp;#34;avg&amp;#34;: {
             &amp;#34;field&amp;#34;: &amp;#34;total_quantity&amp;#34;
           }
         }
       }
    }
  }
}

# response 
{
  &amp;#34;took&amp;#34; : 2,
  &amp;#34;timed_out&amp;#34; : false,
  &amp;#34;_shards&amp;#34; : {
    &amp;#34;total&amp;#34; : 1,
    &amp;#34;successful&amp;#34; : 1,
    &amp;#34;skipped&amp;#34; : 0,
    &amp;#34;failed&amp;#34; : 0
  },
  &amp;#34;hits&amp;#34; : {
    &amp;#34;total&amp;#34; : {
      &amp;#34;value&amp;#34; : 4675,
      &amp;#34;relation&amp;#34; : &amp;#34;eq&amp;#34;
    },
    &amp;#34;max_score&amp;#34; : null,
    &amp;#34;hits&amp;#34; : [ ]
  },
  &amp;#34;aggregations&amp;#34; : {
    &amp;#34;group_by_state&amp;#34; : {
      &amp;#34;doc_count_error_upper_bound&amp;#34; : 0,
      &amp;#34;sum_other_doc_count&amp;#34; : 0,
      &amp;#34;buckets&amp;#34; : [
        {
          &amp;#34;key&amp;#34; : &amp;#34;FEMALE&amp;#34;,
          &amp;#34;doc_count&amp;#34; : 2433,
          &amp;#34;average_product&amp;#34; : {
            &amp;#34;value&amp;#34; : 2.1265926839293052
          }
        },
        {
          &amp;#34;key&amp;#34; : &amp;#34;MALE&amp;#34;,
          &amp;#34;doc_count&amp;#34; : 2242,
          &amp;#34;average_product&amp;#34; : {
            &amp;#34;value&amp;#34; : 2.1931311329170384
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;#5&lt;/code&gt; 쿼리를 통해, 성별로 구매한 평균 product 개수를 알 수 있다.
이러한 분석 작업은 경우에 따라, 많은 양의 힙 메모리를 필요로 할 수 있기 때문에, kibana 같은 시각화 툴을 사용할 경우 조심해야한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;데이터 범위를 지나치게 크게 잡을 경우, ES 전체가 응답 불가에 빠질 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Elastic Search 01 장</title>
      <link>https://dive-ors.github.io/posts/elasticsearch/elastic-search-01/</link>
      <pubDate>Thu, 07 Apr 2022 22:10:26 +0900</pubDate>
      
      <guid>https://dive-ors.github.io/posts/elasticsearch/elastic-search-01/</guid>
      <description>&lt;h1 id=&#34;es-1장-훑어보기&#34;&gt;ES 1장 훑어보기&lt;/h1&gt;
&lt;p&gt;Elasticsearch는 Lucence 기반의 오픈소스 검색엔진으로, Json 기반의 문서를 저장 / 검색 / 데이터 분석 작업을 할 수 있다.&lt;/p&gt;
&lt;p&gt;ES는 아래 4가지 큰 특징을 갖고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;준실시간 검색 엔진&lt;/li&gt;
&lt;li&gt;클러스터 구성&lt;/li&gt;
&lt;li&gt;스키마리스&lt;/li&gt;
&lt;li&gt;Rest API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;준실시간 검색 엔진&lt;/code&gt; 이란, 실시간에 준하는 검색을 제공한다는 의미이다.
ES는 데이터가 입력 될 경우 메모리에 저장 후, Shard (데이터 저장공간)에 데이터를 저장한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;refresh_interval&lt;/code&gt; 에 입력된 주기로, 메모리에 저장된 데이터를 Disk에 옮긴다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img  src=&#34;https://dive-ors.github.io/images/es/%ec%a4%80-%ec%8b%a4%ec%8b%9c%ea%b0%84%ec%84%b1.jpg&#34;
        alt=&#34;준 실시간 성&#34;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;클러스터&lt;/code&gt; 란, 여러대의 구성 요소를 논리적으로 결합하여, 하나의 구성 요소 처럼 사용 할 수 있게 해주는 기술이며, ES는 1개 이상의 노드를 묶어서 하나의 클러스터로 구성할 수 있다.
클러스터로 구성하면, 높은 수준의 안정성과 부하 분산을 기대할 수 있다.
또한 같은 클러스터에 속한 노드들은 메시 형태로 요청을 주고 받기때문에, 어떤 노드에서도 색인 / 검색 작업을 처리할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;메시 ? 모든 구성 요소가 논리적으로 연결되어 있어, 다른 노드들과 직접적으로 통신할 수 있는 네트워크 형태를 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;스키마리스&lt;/code&gt; 란 문서를 입력하기 앞서, 어떤 필드를 저장 할 것인지 사전에 정의하지 않아도 된다는 의미이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;사전에 스키마를 정의하지 않아도, 데이터를 입력시 동적으로 스키마를 생성되며, 기존에 있는 컬럼에 다른 타입을 입력 할 경우 충돌이 발생한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Rest API&lt;/code&gt;를 지원함으로, 어떤 언어로도 Client 를 만들 수 있다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic Search Setup</title>
      <link>https://dive-ors.github.io/posts/elasticsearch/elastic-search-setup/</link>
      <pubDate>Thu, 07 Apr 2022 21:55:20 +0900</pubDate>
      
      <guid>https://dive-ors.github.io/posts/elasticsearch/elastic-search-setup/</guid>
      <description>&lt;h2 id=&#34;docker-를-이용한-elasticsearch-설치&#34;&gt;Docker 를 이용한 Elasticsearch 설치&lt;/h2&gt;
&lt;p&gt;자세한 가이드는 &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;ES 문서&lt;/a&gt;
 를 참고해주세요.&lt;/p&gt;
&lt;p&gt;Elasticsearch 8 점대부터는 TLS 이 기본으로 들어갑니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local 에서 Test 하더라도, https 설정이 필요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# docker image pull
# 작성 시점에는 8.1.1 버전을 사용합니다. 
docker pull docker.elastic.co/elasticsearch/elasticsearch:${version}

#  다른 container 와 통신 하기 위해, network 설정 
docker network create elastic

# elasticsearch run 
docker run --name es01 --net elastic -p 9200:9200 -p 9300:9300 -it docker.elastic.co/elasticsearch/elasticsearch:8.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;만약 docker 를 띄우는 과정에서, &lt;code&gt;max virtual memory areas vm.max_map_count [65530] is too low,&lt;/code&gt; 에러가 나온다면, max_map_count 를 올리는 작업을 해야합니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gimsesu.me/elasticsearch-change-vm-max-map-count&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;참고&lt;/a&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Elasticsearch는 운영 체제를 이용하여 인덱스 파일들을 가상 메모리에 매핑하고, 검색 요청이 들어오면 디스크에 접근할 필요 없이 캐시에 들어 있는 데이터를 가져와 신속하게 응답한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Window에서 사용 시, 명령을 실행하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;1) wsl -d docker-desktop
2) sysctl -w vm.max_map_count=262144
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ES 최초 실행 시, password 와 token 값을 알려주는데, 이를 저장해두었다가 사용하면 됩니다.
만약, 비밀번호를 초기화 하고 싶다면, 아래 명령어를 사용하면 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;curl 로 ES를 사용하고 싶다면, http_ca 값을 가져온 뒤 사용하면 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt .
curl --cacert http_ca.crt -u elastic https://localhost:9200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이하 kibana 세팅입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# pull 
docker pull docker.elastic.co/kibana/kibana:8.1.1

# run kibana
docker run --name kib-01 --net elastic -p 5601:5601 docker.elastic.co/kibana/kibana:8.1.1

# 접속 후, 사전에 발급한 토큰 입력 및 kibana 에 찍힌 verification code 를 입력하면 됩니다.
# 만약 토큰이 유효하지 않을 경우, es 에서 재발급 후 진행하면 됩니다.

docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana

# password 를 잊었다면, 아래 명령을 통해 재 설정도 가능합니다.

docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이후 위 설정을 이용하여 &lt;a href=&#34;http://www.yes24.com/Product/Goods/96520155&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;책&lt;/a&gt;
 내용을 정리합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Engine 01</title>
      <link>https://dive-ors.github.io/posts/docker/docker-02-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dive-ors.github.io/posts/docker/docker-02-01/</guid>
      <description>&lt;h2 id=&#34;도커-이미지와-컨테이너&#34;&gt;도커 이미지와 컨테이너&lt;/h2&gt;
&lt;p&gt;도커 엔진에서 사용하는 기본 단위는 이미지와 컨테이너이며, 도커 엔진의 핵심이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;도커 이미지&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이미지는 컨테이너를 생성할 때 필요한 요소이며, iso 파일과 비슷한 개념이다.
컨테이너를 생성하고 실행할대 읽기 전용으로 사용되며, 도커 명령어로 내려받을 수 있으므로 별도로 설치할 필요가 없다.&lt;/p&gt;
&lt;p&gt;기본적인 형태는 아래와 같다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;repositoryName/ImageName:Tag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ex) &lt;code&gt;ubuntu:latest&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;저장소 이미지는 생략 가능하며, 명시되지 않을 경우 &lt;code&gt;도커 허브의 공식 이미지&lt;/code&gt; 를 의미한다. &lt;br&gt;
태그는 이미지의 버전을 의미하며, 기본 값은 latest 로 인식된다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;도커 컨테이너&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;컨테이너란, 도커 이미지에 맞는 &lt;code&gt;파일 시스템과 격리된 시스템 자원 및 네트워크&lt;/code&gt; 를 사용할 수 있는 독립된 공간을 의미한다.
대부분의 컨테이너는 도커 이미지의 종류에 따라 알맞은 설정 과 파일을 갖고 있기때문에 이미지의 목적과 맞도록 사용된다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nginx 이미지 로 생성된 컨테이너에는 nginx 설정 및 파일들이 포함되어 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;컨테이너는 이미지를 &lt;code&gt;읽기 전용&lt;/code&gt; 으로 사용한다.
이미지에서 변경된 사항만 컨테이너 계층에 저장하므로, 컨테이너의 변경 사항이 이미지에 영향을 주지 않는다.
또한 위에서 언급했듯, 격리된 시스템 자원을 제공받아, 호스트와 분리되어 있는 구조이다.
따라서 다른 컨테이너에서 어떤 Application 이 설치되거나, 삭제되어도 영향을 받지 않는다.&lt;/p&gt;
&lt;h2 id=&#34;도커-컨테이너-다루기&#34;&gt;도커 컨테이너 다루기&lt;/h2&gt;
&lt;h4 id=&#34;컨테이너-생성&#34;&gt;컨테이너 생성&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker run -it ubuntu:14.04 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;run&lt;/code&gt; 명령은 컨테이너를 생성하고 실행하는 역할을 한다.
&lt;code&gt;ubuntu:14.04&lt;/code&gt;은 이미지의 이름이며, -it 는 컨테이너와 상호 입출력을 가능하게 한다.&lt;/p&gt;
&lt;p&gt;run 실행 시, 이미지가 로컬에 없다면 도커 허브에서 자동으로 이미지를 내려받아 컨테이너를 생성 / 실행한다.&lt;/p&gt;
&lt;p&gt;이는 2가지 명령어로 풀어서 쓸 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker pull centos:7 
docker create -it --name mycentos centos:7 # 입출력을 위해 it option을 명시해야한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다만 create 는 생성만 할 뿐, run 명령어와 달리 컨테이너 내부로 들어가지 않는다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;실행도 하지 않으므로, start 명령을 통해 컨테이너를 실행해야한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;내부로 들어가기 위해선 &lt;code&gt;attach&lt;/code&gt; 명령을 사용하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker start mycentos
docker attach mycentos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;정리하자면 run 과 create 는 아래처럼 동작한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;run&lt;/code&gt;  pull -&amp;gt; create -&amp;gt; start -&amp;gt; (-it 사용시) attach  &lt;br&gt;
&lt;code&gt;create&lt;/code&gt;  pull -&amp;gt; create&lt;/p&gt;
&lt;p&gt;대부분 컨테이너를 생성과 동시에 시작하기 때문에 run 명령어를 더 많이 사용한다.&lt;/p&gt;
&lt;h4 id=&#34;컨테이너-목록-확인&#34;&gt;컨테이너 목록 확인&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker ps 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ps&lt;/code&gt; 명령을 통해 정지되지 않은 컨테이너 목록을 볼 수 있다.
모든 컨테이너를 보기 위해선 &lt;code&gt;-a&lt;/code&gt; 를 통해 목록을 확인 할 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;컨테이너-삭제&#34;&gt;컨테이너 삭제&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker rm mycentos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;rm&lt;/code&gt; 명령을 통해 정지된 컨테이너를 삭제할 수 있다.
실행 중인 컨테이너라면, 정지 후 삭제하거나, &lt;code&gt;-f&lt;/code&gt; option 을 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;만약 모든 컨테이너를 삭제하고 싶다면, &lt;code&gt;prune&lt;/code&gt; 명령을 사용 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker container prune
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;또한 -aq option 을 조합하여 컨테이너를 삭제 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker ps -aq | xargs docker rm -f 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;컨테이너를-외부에-노출&#34;&gt;컨테이너를 외부에 노출&lt;/h4&gt;
&lt;p&gt;컨테이너는 가상 머신과 마찬가지로 가상 IP 주소를 할당받는다. 
기본적으로 172.17.0.x 의 IP를 순차적으로 할당하는데, 컨테이너를 생성 한 후, ifconfig 명령어로 네트워크 인터페이스를 확인 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;➜  ~ docker run -it --name network_test ubuntu:14.04
root@10057ec2108e:/#
root@10057ec2108e:/# ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:ac:11:00:02
          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:696 (696.0 B)  TX bytes:0 (0.0 B)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;도커의 NAT IP 를 할당받은 eth0 인터페이스와 lo 인터페이스가 있으며, 아무 설정을 하지 않았다면 외부에서 접근할 수 없다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;도커가 설치된 호스트에서만 접근할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;외부에 컨테이너 Application 을 노출시키기 위해서는 etho 의 IP / Port 를 Host의 Ip / Port 에 바인딩해야한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker run -it --name mywebserver -p 80:80 ubuntu:14.04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-p&lt;/code&gt; option 을 통해 컨테이너의 포트를 호스트의 포트와 바인딩하여 연결할 수 있게 설정한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;-p ${host-port}:${container-port}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;만약 Host 의 특정 Ip 로 연결하고 싶다면, 아래처럼 사용할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;-p 192.168.0.100:7777:80 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;또한 여러개의 포트를 외부에 개방하려면 -p option 을 여러번 써서 설정 할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;apache 띄우는 예시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;docker run -it --name ubuntu -p 80:80 ubuntu:latest

apt-get update
apt-get install apache2 -y 
service apache2 start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;내려받은 ubuntu image 를 통해 port 를 연결하고, apache 를 설치하면 localhost:80 으로 컨테이너에 접근 할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1. host Ip 의 80 port 로 접근&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2. 80번 port는 컨테이너의 80 port 로 포워딩&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3. 웹서버 접근&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>